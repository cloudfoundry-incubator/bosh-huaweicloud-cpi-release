<%=
  params = {
    'cloud' => {
      'plugin' => 'huaweicloud',
      'properties' => {
        'huaweicloud' => {
          'auth_url' => p('huaweicloud.auth_url'),
          'username' => p('huaweicloud.username'),
          'api_key' => p('huaweicloud.api_key'),
          'default_key_name' => p('huaweicloud.default_key_name'),
          'default_security_groups' => p('huaweicloud.default_security_groups'),
          'default_volume_type' => p('huaweicloud.default_volume_type', nil),
          'wait_resource_poll_interval' => p('huaweicloud.wait_resource_poll_interval'),
          'ignore_server_availability_zone' => p('huaweicloud.ignore_server_availability_zone'),
          'use_nova_networking' => p('huaweicloud.use_nova_networking')
        },
        'registry' => {
          'user' => p('registry.username'),
          'password' => p('registry.password'),
          'address' => p('registry.host')
        },
        'agent' => {
          'ntp' => p('ntp')
        }
      }
    }
  }

  huaweicloud_params = params['cloud']['properties']['huaweicloud']
  if_p('huaweicloud.region')                     { |value| huaweicloud_params['region'] = value }
  if_p('huaweicloud.endpoint_type')              { |value| huaweicloud_params['endpoint_type'] = value }
  if_p('huaweicloud.state_timeout')              { |value| huaweicloud_params['state_timeout'] = value }
  if_p('huaweicloud.stemcell_public_visibility') { |value| huaweicloud_params['stemcell_public_visibility'] = value }
  if_p('huaweicloud.connection_options')         { |value| huaweicloud_params['connection_options'] = value }
  if_p('huaweicloud.boot_from_volume')           { |value| huaweicloud_params['boot_from_volume'] = value }
  if_p('huaweicloud.config_drive')               { |value| huaweicloud_params['config_drive'] = value }
  if_p('huaweicloud.use_dhcp')                   { |value| huaweicloud_params['use_dhcp'] = value }
  if_p('huaweicloud.domain')                     { |value| huaweicloud_params['domain'] = value }
  if_p('huaweicloud.project')                    { |value| huaweicloud_params['project'] = value }
  if_p('huaweicloud.tenant')                     { |value| huaweicloud_params['tenant'] = value }
  if_p('huaweicloud.human_readable_vm_names')    { |value| huaweicloud_params['human_readable_vm_names'] = value }
  if_p('huaweicloud.enable_auto_anti_affinity')  { |value| huaweicloud_params['enable_auto_anti_affinity'] = value }

  if_p('registry.endpoint') do |endpoint|
    params['cloud']['properties']['registry']['endpoint'] = endpoint
  end.else do
    # 'registry.host==127.0.0.1' && registry.port==6901 is a special bosh-init case. Don't raise exception in this case.
    if p('huaweicloud.human_readable_vm_names') == true && p('registry.host') != '127.0.0.1' && p('registry.port') != 6901
      raise "Property 'human_readable_vm_names' can only be used together with 'registry.endpoint'. " +
            "Please refer to http://bosh.io/docs/openstack-registry.html."
    else
      params['cloud']['properties']['registry']['endpoint'] = "http://#{p('registry.host')}:#{p('registry.port')}"
    end
  end

  if_p('blobstore') do
    blobstore_params = {
      'provider' => p('blobstore.provider')
    }
    if p('blobstore.provider') == 's3'
      options_params = {
        'bucket_name' => p('blobstore.bucket_name'),
        'access_key_id' => p(['agent.blobstore.access_key_id', 'blobstore.access_key_id']),
        'secret_access_key' => p(['agent.blobstore.secret_access_key', 'blobstore.secret_access_key'])
      }

      def update_blobstore_options(options, manifest_key, rendered_key=manifest_key)
        value = p(["agent.blobstore.#{manifest_key}", "blobstore.#{manifest_key}"], nil)
        options[rendered_key] = value unless value.nil?
      end

      update_blobstore_options(options_params, 'use_ssl')
      update_blobstore_options(options_params, 's3_port', 'port')
      update_blobstore_options(options_params, 'host')
      update_blobstore_options(options_params, 'ssl_verify_peer')
      update_blobstore_options(options_params, 's3_signature_version', 'signature_version')
      update_blobstore_options(options_params, 's3_region', 'region')

    elsif p('blobstore.provider') == 'local'
      options_params = {
        'blobstore_path' => p('blobstore.path')
      }
    else
      options_params = {
        'endpoint' => "http://#{p(['agent.blobstore.address', 'blobstore.address'])}:#{p('blobstore.port')}",
        'user' => p('blobstore.agent.user'),
        'password' => p('blobstore.agent.password')
      }
    end

    blobstore_params['options'] = options_params
    params['cloud']['properties']['agent']['blobstore'] = blobstore_params
  end

  if_p('agent.mbus') do |mbus|
    params['cloud']['properties']['agent']['mbus'] = mbus
  end.else_if_p('nats') do
    params['cloud']['properties']['agent']['mbus'] = "nats://#{p('nats.user')}:#{p('nats.password')}@#{p(['agent.nats.address', 'nats.address'])}:#{p('nats.port')}"
  end

  JSON.dump(params)
%>
